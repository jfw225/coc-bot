import os

FILE_NAME = "images.py"
IMAGE_DIR = os.path.join("assets", "images")


class Dir(dict):
    pass


class File(str):
    pass


def construct():

    pairs = [(root, file) for root, _, files in os.walk(IMAGE_DIR)
             for file in files]

    objs = Dir()
    for root, file in pairs:
        sub_obj = objs

        # depth-first walk over the folder names
        for name in set(root.split(os.sep)) - set(IMAGE_DIR.split(os.sep)):
            if name not in sub_obj:
                sub_obj[name] = Dir()

            sub_obj = sub_obj[name]

        basename, _ = os.path.splitext(file)
        components = os.path.join(root, file).split(os.sep)

        sub_obj[basename] = File(
            f"cv2.imread(os.path.join(*{components}))"
        )
        File(os.path.join(root, file))

    # import json
    # print(json.dumps(objs, indent=4))

    return objs


def write(objs):

    def rec_format(key, sub_obj, depth=0):
        # base case: file
        if isinstance(sub_obj, File):
            return ["\t" * depth +
                    f"{key.upper()} = {sub_obj}\n"]

        # otherwise, should be a dir
        assert isinstance(sub_obj, Dir), sub_obj

        return [
            "\n",
            "\t" * depth + f"class {key.upper()}:\n",
            *[line
              for key, sub_obj in sub_obj.items()
              for line in rec_format(key, sub_obj, depth + 1)]
        ]

    base_key, _ = os.path.splitext(FILE_NAME)

    lines = ['""" This code is generated by `scripts/write_images`. """\n',
             "import os\n",
             "import cv2\n\n"] + rec_format(base_key, objs)

    with open(FILE_NAME, "w") as f:
        f.writelines(lines)


if __name__ == '__main__':
    assert "scripts" not in os.getcwd(), os.getcwd()

    objs = construct()
    write(objs)
